/**
 * Fun√ß√µes para indexa√ß√£o de dados no Algolia
 * Sincroniza√ß√£o de dados do Sanity para Algolia
 */

import { adminClient, INDICES, formatProdutoForAlgolia, formatAssociacaoForAlgolia, PRODUTOS_INDEX_SETTINGS, ASSOCIACOES_INDEX_SETTINGS } from './client';
import { sanityClient } from '@/lib/sanity/client';

// Queries GROQ para buscar dados do Sanity
const PRODUTOS_QUERY = `*[_type == "produto"] {
  _id,
  _createdAt,
  _updatedAt,
  nome,
  slug,
  descricao,
  categoria,
  disponibilidade,
  preco,
  tecnica,
  material,
  dimensoes,
  cor,
  tags,
  imagens,
  visualizacoes,
  associacao->{
    _id,
    nome,
    endereco
  }
}`;

const ASSOCIACOES_QUERY = `*[_type == "associacao"] {
  _id,
  _createdAt,
  _updatedAt,
  nome,
  slug,
  descricao,
  ativa,
  endereco,
  especialidades,
  numero_artesas,
  presidente,
  telefone,
  whatsapp,
  imagens,
  "produtos_count": count(*[_type == "produto" && references(^._id)])
}`;

/**
 * Inicializa os √≠ndices Algolia com configura√ß√µes
 */
export async function initializeAlgoliaIndices() {
  if (!adminClient) {
    console.warn('Cliente admin do Algolia n√£o configurado');
    return false;
  }

  try {
    console.log('Inicializando √≠ndices Algolia...');

    // Configurar √≠ndice de produtos
    const produtosIndex = adminClient.initIndex(INDICES.produtos);
    await produtosIndex.setSettings(PRODUTOS_INDEX_SETTINGS);
    console.log('‚úÖ √çndice de produtos configurado');

    // Configurar √≠ndice de associa√ß√µes
    const associacoesIndex = adminClient.initIndex(INDICES.associacoes);
    await associacoesIndex.setSettings(ASSOCIACOES_INDEX_SETTINGS);
    console.log('‚úÖ √çndice de associa√ß√µes configurado');

    return true;
  } catch (error) {
    console.error('Erro ao inicializar √≠ndices Algolia:', error);
    return false;
  }
}

/**
 * Indexa todos os produtos do Sanity no Algolia
 */
export async function indexAllProdutos() {
  if (!adminClient) {
    console.warn('Cliente admin do Algolia n√£o configurado');
    return false;
  }

  try {
    console.log('Buscando produtos do Sanity...');
    const produtos = await sanityClient.fetch(PRODUTOS_QUERY);
    
    if (!produtos || produtos.length === 0) {
      console.log('Nenhum produto encontrado no Sanity');
      return true;
    }

    console.log(`Encontrados ${produtos.length} produtos para indexar`);

    // Formatar produtos para Algolia
    const algoliaObjects = produtos.map(formatProdutoForAlgolia);

    // Indexar em lotes
    const index = adminClient.initIndex(INDICES.produtos);
    const batchSize = 100;
    
    for (let i = 0; i < algoliaObjects.length; i += batchSize) {
      const batch = algoliaObjects.slice(i, i + batchSize);
      await index.saveObjects(batch);
      console.log(`‚úÖ Lote ${Math.floor(i / batchSize) + 1} indexado (${batch.length} produtos)`);
    }

    console.log(`‚úÖ Todos os ${produtos.length} produtos foram indexados`);
    return true;
  } catch (error) {
    console.error('Erro ao indexar produtos:', error);
    return false;
  }
}

/**
 * Indexa todas as associa√ß√µes do Sanity no Algolia
 */
export async function indexAllAssociacoes() {
  if (!adminClient) {
    console.warn('Cliente admin do Algolia n√£o configurado');
    return false;
  }

  try {
    console.log('Buscando associa√ß√µes do Sanity...');
    const associacoes = await sanityClient.fetch(ASSOCIACOES_QUERY);
    
    if (!associacoes || associacoes.length === 0) {
      console.log('Nenhuma associa√ß√£o encontrada no Sanity');
      return true;
    }

    console.log(`Encontradas ${associacoes.length} associa√ß√µes para indexar`);

    // Formatar associa√ß√µes para Algolia
    const algoliaObjects = associacoes.map(formatAssociacaoForAlgolia);

    // Indexar
    const index = adminClient.initIndex(INDICES.associacoes);
    await index.saveObjects(algoliaObjects);

    console.log(`‚úÖ Todas as ${associacoes.length} associa√ß√µes foram indexadas`);
    return true;
  } catch (error) {
    console.error('Erro ao indexar associa√ß√µes:', error);
    return false;
  }
}

/**
 * Indexa um √∫nico produto
 */
export async function indexSingleProduto(produtoId: string) {
  if (!adminClient) {
    console.warn('Cliente admin do Algolia n√£o configurado');
    return false;
  }

  try {
    const produto = await sanityClient.fetch(
      `*[_type == "produto" && _id == $id][0] {
        ${PRODUTOS_QUERY.split('{')[1].split('}')[0]}
      }`,
      { id: produtoId }
    );

    if (!produto) {
      console.warn(`Produto ${produtoId} n√£o encontrado no Sanity`);
      return false;
    }

    const algoliaObject = formatProdutoForAlgolia(produto);
    const index = adminClient.initIndex(INDICES.produtos);
    await index.saveObject(algoliaObject);

    console.log(`‚úÖ Produto ${produtoId} indexado com sucesso`);
    return true;
  } catch (error) {
    console.error(`Erro ao indexar produto ${produtoId}:`, error);
    return false;
  }
}

/**
 * Indexa uma √∫nica associa√ß√£o
 */
export async function indexSingleAssociacao(associacaoId: string) {
  if (!adminClient) {
    console.warn('Cliente admin do Algolia n√£o configurado');
    return false;
  }

  try {
    const associacao = await sanityClient.fetch(
      `*[_type == "associacao" && _id == $id][0] {
        ${ASSOCIACOES_QUERY.split('{')[1].split('}')[0]}
      }`,
      { id: associacaoId }
    );

    if (!associacao) {
      console.warn(`Associa√ß√£o ${associacaoId} n√£o encontrada no Sanity`);
      return false;
    }

    const algoliaObject = formatAssociacaoForAlgolia(associacao);
    const index = adminClient.initIndex(INDICES.associacoes);
    await index.saveObject(algoliaObject);

    console.log(`‚úÖ Associa√ß√£o ${associacaoId} indexada com sucesso`);
    return true;
  } catch (error) {
    console.error(`Erro ao indexar associa√ß√£o ${associacaoId}:`, error);
    return false;
  }
}

/**
 * Remove um objeto do √≠ndice
 */
export async function removeFromIndex(indexName: keyof typeof INDICES, objectId: string) {
  if (!adminClient) {
    console.warn('Cliente admin do Algolia n√£o configurado');
    return false;
  }

  try {
    const index = adminClient.initIndex(INDICES[indexName]);
    await index.deleteObject(objectId);
    
    console.log(`‚úÖ Objeto ${objectId} removido do √≠ndice ${indexName}`);
    return true;
  } catch (error) {
    console.error(`Erro ao remover objeto ${objectId} do √≠ndice ${indexName}:`, error);
    return false;
  }
}

/**
 * Limpa completamente um √≠ndice
 */
export async function clearIndex(indexName: keyof typeof INDICES) {
  if (!adminClient) {
    console.warn('Cliente admin do Algolia n√£o configurado');
    return false;
  }

  try {
    const index = adminClient.initIndex(INDICES[indexName]);
    await index.clearObjects();
    
    console.log(`‚úÖ √çndice ${indexName} limpo com sucesso`);
    return true;
  } catch (error) {
    console.error(`Erro ao limpar √≠ndice ${indexName}:`, error);
    return false;
  }
}

/**
 * Executa uma sincroniza√ß√£o completa
 */
export async function fullSync() {
  console.log('üöÄ Iniciando sincroniza√ß√£o completa com Algolia...');
  
  const initSuccess = await initializeAlgoliaIndices();
  if (!initSuccess) {
    console.error('‚ùå Falha na inicializa√ß√£o dos √≠ndices');
    return false;
  }

  const produtosSuccess = await indexAllProdutos();
  const associacoesSuccess = await indexAllAssociacoes();

  if (produtosSuccess && associacoesSuccess) {
    console.log('üéâ Sincroniza√ß√£o completa realizada com sucesso!');
    return true;
  } else {
    console.error('‚ùå Sincroniza√ß√£o falhou parcialmente');
    return false;
  }
}

/**
 * Estat√≠sticas dos √≠ndices
 */
export async function getIndexStats() {
  if (!adminClient) {
    return null;
  }

  try {
    const stats = await Promise.all([
      adminClient.initIndex(INDICES.produtos).getStats(),
      adminClient.initIndex(INDICES.associacoes).getStats(),
    ]);

    return {
      produtos: {
        numberOfRecords: stats[0].numberOfRecords,
        dataSize: stats[0].dataSize,
        fileSize: stats[0].fileSize,
        lastBuildTimeS: stats[0].lastBuildTimeS,
      },
      associacoes: {
        numberOfRecords: stats[1].numberOfRecords,
        dataSize: stats[1].dataSize,
        fileSize: stats[1].fileSize,
        lastBuildTimeS: stats[1].lastBuildTimeS,
      },
    };
  } catch (error) {
    console.error('Erro ao obter estat√≠sticas dos √≠ndices:', error);
    return null;
  }
}